2번
P301_1번의 UML 클래스 다이어그램

+-----------------+
|     MyTime      |
+-----------------+
| - hours: int    |
| - minutes: int  |
| - seconds: int  |
| - millis: int   |
+-----------------+
| + MyTime()      |
| + read(): void  |
| + convert(duration: double): void |
| + print(): void |
| + add(t: MyTime): MyTime |
| + reset(): void |
+-----------------+

멤버 함수들의 매개변수와 반환형이 5장의 일반 함수들과 변경된 이유를 설명하라
-addTime → add:
    5장: 외부 함수 addTime은 두 MyTime 객체를 받아 합계를 계산.
        매개변수 2개: t1, t2.
        반환형: MyTime.
    현재: 멤버 함수 add는 호출 객체(this)와 하나의 MyTime 객체(t)를 사용.
        매개변수 1개: t.
        반환형: MyTime.
    변경 이유:
        객체 지향 설계: 구조체에서 클래스로 전환하며, 연산을 클래스 내부로 통합. t1.add(t2)는 객체 간 연산을 더 자연스럽게 표현.
        캡슐화: private 멤버 접근을 위해 외부 함수 대신 멤버 함수로 변경.
        간소화: this를 활용해 매개변수 수를 줄임.

-read 추가:
    5장: main()에서 cin으로 멤버 변수에 직접 접근 (time1.hours 등).
     현재: read()가 입력 로직을 처리.
        매개변수: 없음.
        반환형: void (객체 내부 상태 변경).
    변경 이유:
        캡슐화: private 멤버로 변경되며 외부 접근 불가 → 입력을 클래스 메서드로 이동.
        재사용성: 입력 로직을 함수로 분리해 여러 객체에 적용 가능.
        요구사항 2: 명시적으로 read() 추가 지시.

-print 추가:
    5장: main()에서 cout으로 직접 출력 (sum.hours 등, 단위 포함).
    현재: print()가 01:02:34:567 형식으로 출력.
        매개변수: 없음.
        반환형: void.
    변경 이유:
        캡슐화: private 멤버 접근을 제한하고, 출력 형식을 클래스에서 관리.
        표준화: setfill과 setw로 일관된 형식 제공 (요구사항 3).
        단순화: 출력 형식이 "시간/분/초/밀리초"에서 hh:mm:ss:mmm으로 간결해짐.

-convert 추가:
    5장: 없음.
    현재: convert(double)가 초 단위 값을 변환.
        매개변수: double duration.
        반환형: void (객체 상태 변경).
    변경 이유:
        기능 확장: 5장은 덧셈만 지원했으나, 초 단위 입력을 처리하는 기능 추가 (요구사항 4).
        유연성: 외부에서 초 단위 데이터를 받아 객체로 설정 가능.

-reset 추가:
    5장: 없음.
    현재: reset()이 멤버 변수를 0으로 초기화.
        매개변수: 없음.
        반환형: void.
    변경 이유:
        객체 관리: 객체를 초기 상태로 되돌리는 기능 추가 (요구사항 4).
        재사용성: 객체를 새로 사용할 때 유용.
